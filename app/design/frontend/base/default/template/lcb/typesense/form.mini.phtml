<?php
/* @var LCB_Typesense_Block_Searchbox $this */
/* @var Mage_Catalogsearch_Helper_Data $catalogSearchHelper */
$catalogSearchHelper = $this->helper('catalogsearch');
?>

<?php if ($this->isAutocompleteEnabled()): ?>

    <div id="search_mini_form"></div>

    <script>
        let typesenseClient = new Typesense.Client({
            'nearestNode': {'host': '<?= $this->getAutocompleteUrl()  ?>','protocol': '<?= $this->getAutocompleteProtocol() ?>'},
            'nodes': [
                {'host': '<?= $this->getAutocompleteUrl() ?>', 'protocol': '<?= $this->getAutocompleteProtocol() ?>'},
            ],
            'apiKey': '<?= Mage::helper('lcb_typesense')->getSearchOnlyApiKey() ?>',
            'connectionTimeoutSeconds': 2
        })


        const {autocomplete} = window['@algolia/autocomplete-js'];
        autocomplete({
            container: '#search_mini_form',
            detachedMediaQuery: 'none',
            placeholder: '<?php echo $this->__('Search') ?>',
            onSubmit({ state }) {
                const searchPageUrl = '<?= $this->getUrl('typesense/search'); ?>' + '?q=' + encodeURIComponent(state.query);
                window.location.href = searchPageUrl;

            },
            async getSources( {query}) {
                const results = await typesenseClient.collections('<?= Mage::helper('lcb_typesense')->getCollectionName() ?>').documents().search({
                    q: query,
                    query_by: 'name,short_description,sku',
                    highlight_full_fields: 'name,sku'
                })


                return [
                    {
                        sourceId: 'predictions',
                        getItems() {
                            return results.hits;
                        },
                        getItemInputValue( {item}) {
                            return item.document.name;
                        },
                        templates: {
                            item( { item, html }) {
                                // Attempt to find highlights for 'brand' and 'name', defaulting to plain text if not present
                                const nameHighlight = item.highlights.find(h => h.field === 'name');
                                const skuHighlight = item.highlights.find(h => h.field === 'sku');

                                const itemUrl = '<?= $this->getUrl() ?>' + item.document.request_path;
                                const nameHtml = nameHighlight ? html`${nameHighlight.value}` : item.document.name;
                                const skuHtml = skuHighlight ? html`${skuHighlight.value}` : item.document.sku;

                                return html`
                                <a href="${itemUrl}">
                                    <span class="autocomplete-name" dangerouslySetInnerHTML=${{__html: nameHtml}}></span>
                                    <span> - </span>
                                    <span class="autocomplete-sku" dangerouslySetInnerHTML=${{__html: skuHtml}}></span>
                                </a>
                            `;
                            },

                            noResults() {
                                return '<?= $this->__('Your search returns no results.') ?>';
                            },
                        },
                    },
                ];
            },
        });
    </script>

<?php else: ?>

    <form id="search_mini_form" action="<?php echo $this->getUrl('typesense/search') ?>" method="get">
        <div class="input-box">
            <label for="search"><?php echo $this->__('Search:') ?></label>
            <input id="search" type="search" name="<?php echo $catalogSearchHelper->getQueryParamName() ?>" value="<?php echo $catalogSearchHelper->getEscapedQueryText() ?>" class="input-text required-entry" maxlength="<?php echo $catalogSearchHelper->getMaxQueryLength();?>" placeholder="<?php echo $this->quoteEscape($this->__('Search entire store here...')) ?>" />
            <button type="submit" title="<?php echo $this->quoteEscape($this->__('Search')) ?>" class="button search-button"><span><span><?php echo $this->__('Search') ?></span></span></button>
        </div>

        <div id="search_autocomplete" class="search-autocomplete"></div>
        <script type="text/javascript">
        //<![CDATA[
            var searchForm = new Varien.searchForm('search_mini_form', 'search', '');
            searchForm.initAutocomplete('<?php echo $catalogSearchHelper->getSuggestUrl() ?>', 'search_autocomplete');
        //]]>
        </script>
    </form>

<?php endif; ?>
